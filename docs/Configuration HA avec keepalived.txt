Configuration Haute Disponibilité pour Kubernetes avec keepalived
================================================================

IP virtuelle: 192.168.0.200 (k8s)
Master 1: 192.168.0.201 (k8s01-1) - Priority 101
Master 2: 192.168.0.202 (k8s01-2) - Priority 100
Master 3: 192.168.0.203 (k8s01-3) - Priority 99

1) Installation keepalived sur tous les masters
================================================

sudo apt update
sudo apt install keepalived -y


2) Configuration keepalived sur k8s01-1 (Master 1)
===================================================

sudo nano /etc/keepalived/keepalived.conf

###############################################
vrrp_instance VI_1 {
    state MASTER
    interface ens33
    virtual_router_id 51
    priority 101
    advert_int 1

    authentication {
        auth_type PASS
        auth_pass K8s_HA_Pass
    }

    virtual_ipaddress {
        192.168.0.200/24
    }
}
###############################################

sudo systemctl enable keepalived
sudo systemctl start keepalived
sudo systemctl status keepalived


3) Configuration keepalived sur k8s01-2 (Master 2)
===================================================

sudo nano /etc/keepalived/keepalived.conf

###############################################
vrrp_instance VI_1 {
    state BACKUP
    interface ens33
    virtual_router_id 51
    priority 100
    advert_int 1

    authentication {
        auth_type PASS
        auth_pass K8s_HA_Pass
    }

    virtual_ipaddress {
        192.168.0.200/24
    }
}
###############################################

sudo systemctl enable keepalived
sudo systemctl start keepalived
sudo systemctl status keepalived


4) Configuration keepalived sur k8s01-3 (Master 3)
===================================================

sudo nano /etc/keepalived/keepalived.conf

###############################################
vrrp_instance VI_1 {
    state BACKUP
    interface ens33
    virtual_router_id 51
    priority 99
    advert_int 1

    authentication {
        auth_type PASS
        auth_pass K8s_HA_Pass
    }

    virtual_ipaddress {
        192.168.0.200/24
    }
}
###############################################

sudo systemctl enable keepalived
sudo systemctl start keepalived
sudo systemctl status keepalived


5) Vérification de la configuration
====================================

# Sur k8s01-1 (doit avoir l'IP virtuelle)
ip addr show ens33

# Vous devriez voir:
# inet 192.168.0.201/24 brd 192.168.0.255 scope global ens33
# inet 192.168.0.200/24 scope global secondary ens33

# Test de ping vers l'IP virtuelle
ping -c 3 192.168.0.200

# Vérifier les logs keepalived
sudo journalctl -u keepalived -f


6) Test de basculement (Failover)
==================================

# Arrêter keepalived sur k8s01-1
sudo systemctl stop keepalived

# Vérifier que l'IP virtuelle a basculé sur k8s01-2
# Sur k8s01-2:
ip addr show ens33

# Redémarrer keepalived sur k8s01-1
sudo systemctl start keepalived

# L'IP virtuelle devrait revenir sur k8s01-1 (priorité plus haute)


7) Configuration /etc/hosts sur tous les nœuds
===============================================

sudo nano /etc/hosts

###############################################
192.168.0.200 k8s.home.local k8s
192.168.0.201 k8s01-1.home.local k8s01-1
192.168.0.202 k8s01-2.home.local k8s01-2
192.168.0.203 k8s01-3.home.local k8s01-3
###############################################


8) Initialisation du cluster sur k8s01-1
=========================================

# Assurez-vous que keepalived fonctionne et que k8s01-1 a l'IP virtuelle
sudo kubeadm init --config kubelet-ha.yaml --upload-certs

# La commande va générer:
# - kubeadm join pour les autres masters (avec --control-plane)
# - kubeadm join pour les workers


9) Rejoindre les autres masters (k8s01-2 et k8s01-3)
=====================================================

# Utilisez la commande générée par kubeadm init avec --control-plane
# Exemple:
sudo kubeadm join k8s:6443 --token <token> \
    --discovery-token-ca-cert-hash sha256:<hash> \
    --control-plane \
    --certificate-key <cert-key>

# Configurer kubectl sur chaque master
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


10) Vérification du cluster HA
===============================

kubectl get nodes
kubectl get pods -n kube-system

# Vérifier que l'API server répond via l'IP virtuelle
curl -k https://192.168.0.200:6443/healthz

# Tester le basculement:
# 1. Arrêter k8s01-1
sudo shutdown -h now

# 2. Depuis un autre nœud, vérifier que le cluster fonctionne toujours
kubectl get nodes

# L'IP virtuelle devrait avoir basculé automatiquement sur k8s01-2


11) ALTERNATIVE: Configuration avec HAProxy + keepalived
=========================================================

Si vous voulez utiliser HAProxy pour load balancer entre tous les masters:

# Installation sur un nœud dédié ou sur chaque master
sudo apt install haproxy keepalived -y

sudo nano /etc/haproxy/haproxy.cfg

###############################################
frontend kubernetes-frontend
    bind *:6443
    mode tcp
    option tcplog
    default_backend kubernetes-backend

backend kubernetes-backend
    mode tcp
    balance roundrobin
    option tcp-check
    server k8s01-1 192.168.0.201:6443 check fall 3 rise 2
    server k8s01-2 192.168.0.202:6443 check fall 3 rise 2
    server k8s01-3 192.168.0.203:6443 check fall 3 rise 2
###############################################

sudo systemctl enable haproxy
sudo systemctl restart haproxy


Notes importantes:
==================

1. L'interface réseau (ens33) doit être la même sur tous les masters
   Vérifier avec: ip a

2. Le firewall doit autoriser le protocole VRRP (protocole 112)
   sudo ufw allow proto vrrp

3. Les 3 masters doivent être sur le même réseau L2 (même subnet)

4. keepalived est plus simple et suffisant pour la plupart des cas
   HAProxy est utile si vous voulez du load balancing actif entre tous les masters

5. L'IP virtuelle (192.168.0.200) ne doit PAS être assignée manuellement
   keepalived la gère automatiquement
