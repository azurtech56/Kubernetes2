#!/bin/bash
################################################################################
# Biblioth√®que d'idempotence pour les scripts Kubernetes
# Permet de rendre les scripts r√©-ex√©cutables sans effets de bord
# Auteur: azurtech56
# Version: 2.0
################################################################################

STATE_DIR="/var/lib/k8s-setup"
STATE_FILE="$STATE_DIR/installation-state.json"

# Cr√©er le r√©pertoire d'√©tat si n√©cessaire
init_idempotent() {
    mkdir -p "$STATE_DIR" 2>/dev/null || true
    if [ ! -f "$STATE_FILE" ]; then
        echo '{}' > "$STATE_FILE"
    fi
}

# V√©rifier si une op√©ration a d√©j√† √©t√© effectu√©e
# Usage: operation_completed "operation_name"
operation_completed() {
    local operation=$1
    init_idempotent

    if command -v jq &> /dev/null; then
        jq -e ".$operation == true" "$STATE_FILE" &> /dev/null
    else
        grep -q "\"$operation\": *true" "$STATE_FILE" 2>/dev/null
    fi
}

# Marquer une op√©ration comme effectu√©e
# Usage: mark_operation_completed "operation_name"
mark_operation_completed() {
    local operation=$1
    init_idempotent

    if command -v jq &> /dev/null; then
        jq ".$operation = true" "$STATE_FILE" > "$STATE_FILE.tmp" && mv "$STATE_FILE.tmp" "$STATE_FILE"
    else
        # Fallback sans jq (moins robuste mais fonctionnel)
        sed -i "s/}/, \"$operation\": true}/" "$STATE_FILE" 2>/dev/null || \
            echo "{\"$operation\": true}" > "$STATE_FILE"
    fi

    [ -n "${LOG_FILE:-}" ] && echo "[$(date +'%Y-%m-%d %H:%M:%S')] [IDEMPOTENT] Operation '$operation' marqu√©e comme effectu√©e" >> "$LOG_FILE"
}

# R√©initialiser toutes les op√©rations (--reset-state)
reset_all_operations() {
    init_idempotent
    echo '{}' > "$STATE_FILE"
    [ -n "${LOG_FILE:-}" ] && echo "[$(date +'%Y-%m-%d %H:%M:%S')] [IDEMPOTENT] √âtat r√©initialis√©" >> "$LOG_FILE"
}

# Ex√©cuter une commande seulement si l'op√©ration n'a pas √©t√© effectu√©e
# Usage: run_once "operation_name" "command" "success_message"
run_once() {
    local operation=$1
    local command=$2
    local success_msg=${3:-"$operation effectu√©"}

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  $success_msg (d√©j√† fait)"
        return 0
    fi

    if eval "$command"; then
        mark_operation_completed "$operation"
        echo "  ‚úì $success_msg"
        return 0
    else
        echo "  ‚úó √âchec: $operation"
        return 1
    fi
}

################################################################################
# FONCTIONS SP√âCIFIQUES IDEMPOTENTES
################################################################################

# Configuration swap idempotente
setup_swap_idempotent() {
    if operation_completed "swap_disabled"; then
        echo "  ‚è≠Ô∏è  Swap d√©sactiv√© (d√©j√† fait)"
        swapoff -a 2>/dev/null || true
        return 0
    fi

    echo "  üîÑ D√©sactivation du swap..."

    # D√©sactiver le swap
    swapoff -a

    # Commenter les lignes swap dans /etc/fstab (seulement si pas d√©j√† comment√©es)
    if grep -E '^[^#].*swap' /etc/fstab &> /dev/null; then
        sed -i.bak '/\sswap\s/ s/^/#/' /etc/fstab
        echo "  ‚úì Lignes swap comment√©es dans /etc/fstab"
    fi

    mark_operation_completed "swap_disabled"
    echo "  ‚úì Swap d√©sactiv√©"
}

# Configuration des modules kernel idempotente
# Usage: setup_kernel_modules_idempotent "module1" "module2" ...
setup_kernel_modules_idempotent() {
    local modules=("$@")
    local operation="kernel_modules_loaded"

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  Modules kernel charg√©s (d√©j√† fait)"
        # Recharger quand m√™me au cas o√π
        for module in "${modules[@]}"; do
            modprobe "$module" 2>/dev/null || true
        done
        return 0
    fi

    echo "  üîÑ Chargement des modules kernel..."

    # Charger les modules
    for module in "${modules[@]}"; do
        modprobe "$module"
        echo "  ‚úì Module $module charg√©"
    done

    # Ajouter au d√©marrage (seulement si pas d√©j√† pr√©sent)
    for module in "${modules[@]}"; do
        if ! grep -q "^$module$" /etc/modules-load.d/k8s.conf 2>/dev/null; then
            echo "$module" >> /etc/modules-load.d/k8s.conf
        fi
    done

    mark_operation_completed "$operation"
    echo "  ‚úì Modules kernel configur√©s"
}

# Configuration sysctl idempotente
setup_sysctl_idempotent() {
    local operation="sysctl_configured"

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  Param√®tres sysctl configur√©s (d√©j√† fait)"
        sysctl --system &> /dev/null
        return 0
    fi

    echo "  üîÑ Configuration des param√®tres sysctl..."

    cat > /etc/sysctl.d/k8s.conf <<EOF
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

    sysctl --system

    mark_operation_completed "$operation"
    echo "  ‚úì Param√®tres sysctl configur√©s"
}

# Installation de packages idempotente
# Usage: install_package_idempotent "package_name" "operation_name"
install_package_idempotent() {
    local package=$1
    local operation=${2:-"install_$package"}

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  Package $package install√© (d√©j√† fait)"
        return 0
    fi

    # V√©rifier si d√©j√† install√©
    if dpkg -l | grep -q "^ii  $package "; then
        echo "  ‚è≠Ô∏è  Package $package d√©j√† install√©"
        mark_operation_completed "$operation"
        return 0
    fi

    echo "  üîÑ Installation de $package..."
    apt-get install -y "$package"

    mark_operation_completed "$operation"
    echo "  ‚úì Package $package install√©"
}

# R√®gle UFW idempotente
# Usage: setup_ufw_rule_idempotent <port> <proto> <description> [source]
setup_ufw_rule_idempotent() {
    local port=$1
    local proto=$2
    local description=$3
    local source=${4:-""}

    local rule_signature
    if [ -n "$source" ]; then
        rule_signature="ufw_${port}_${proto}_from_${source}"
        rule_signature="${rule_signature//\//_}"  # Remplacer / par _
    else
        rule_signature="ufw_${port}_${proto}"
    fi

    # V√©rifier si la r√®gle existe d√©j√† dans UFW
    if [ -n "$source" ]; then
        if ufw status | grep -qE "${port}/${proto}.*${source}"; then
            echo "  ‚è≠Ô∏è  UFW: $description (r√®gle d√©j√† pr√©sente)"
            mark_operation_completed "$rule_signature"
            return 0
        fi
    else
        if ufw status | grep -qE "^${port}/${proto}.*ALLOW"; then
            echo "  ‚è≠Ô∏è  UFW: $description (r√®gle d√©j√† pr√©sente)"
            mark_operation_completed "$rule_signature"
            return 0
        fi
    fi

    if operation_completed "$rule_signature"; then
        echo "  ‚è≠Ô∏è  UFW: $description (d√©j√† configur√©)"
        return 0
    fi

    echo "  üîÑ UFW: Ajout r√®gle $description..."

    if [ -n "$source" ]; then
        ufw allow from "$source" to any port "$port" proto "$proto"
    else
        ufw allow "$port/$proto"
    fi

    mark_operation_completed "$rule_signature"
    echo "  ‚úì UFW: $description configur√©"
}

# R√®gle UFW pour r√©seau idempotente
# Usage: setup_ufw_network_rule_idempotent <network> <direction>
setup_ufw_network_rule_idempotent() {
    local network=$1
    local direction=$2  # "from" ou "to"

    local rule_signature="ufw_network_${direction}_${network}"
    rule_signature="${rule_signature//\//_}"  # Remplacer / par _

    # V√©rifier si la r√®gle existe d√©j√†
    if ufw status | grep -qE "ALLOW.*${direction}.*${network}"; then
        echo "  ‚è≠Ô∏è  UFW: R√©seau $network ($direction) (r√®gle d√©j√† pr√©sente)"
        mark_operation_completed "$rule_signature"
        return 0
    fi

    if operation_completed "$rule_signature"; then
        echo "  ‚è≠Ô∏è  UFW: R√©seau $network ($direction) (d√©j√† configur√©)"
        return 0
    fi

    echo "  üîÑ UFW: Autorisation r√©seau $network ($direction)..."

    ufw allow "$direction" "$network"

    mark_operation_completed "$rule_signature"
    echo "  ‚úì UFW: R√©seau $network ($direction) configur√©"
}

# R√®gle UFW pour VRRP idempotente
setup_ufw_vrrp_idempotent() {
    local operation="ufw_vrrp_configured"

    # V√©rifier si la r√®gle existe d√©j√†
    if ufw status | grep -qE "ALLOW.*vrrp"; then
        echo "  ‚è≠Ô∏è  UFW: VRRP (r√®gle d√©j√† pr√©sente)"
        mark_operation_completed "$operation"
        return 0
    fi

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  UFW: VRRP (d√©j√† configur√©)"
        return 0
    fi

    echo "  üîÑ UFW: Autorisation VRRP..."

    ufw allow from any to any proto vrrp

    mark_operation_completed "$operation"
    echo "  ‚úì UFW: VRRP configur√©"
}

# Activation UFW idempotente
enable_ufw_idempotent() {
    local operation="ufw_enabled"

    # V√©rifier si UFW est d√©j√† actif
    if ufw status | grep -q "Status: active"; then
        echo "  ‚è≠Ô∏è  UFW d√©j√† actif"
        mark_operation_completed "$operation"
        return 0
    fi

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  UFW activ√© (d√©j√† fait)"
        ufw --force enable
        return 0
    fi

    echo "  üîÑ Activation de UFW..."

    ufw --force enable
    ufw reload

    mark_operation_completed "$operation"
    echo "  ‚úì UFW activ√©"
}

# Ajout d'un repository Kubernetes idempotent
setup_k8s_repo_idempotent() {
    local operation="k8s_repo_added"

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  Repository Kubernetes configur√© (d√©j√† fait)"
        return 0
    fi

    # V√©rifier si le repo existe d√©j√†
    if [ -f /etc/apt/sources.list.d/kubernetes.list ]; then
        echo "  ‚è≠Ô∏è  Repository Kubernetes d√©j√† pr√©sent"
        mark_operation_completed "$operation"
        return 0
    fi

    echo "  üîÑ Configuration du repository Kubernetes..."

    # Installation des d√©pendances
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl gpg

    # Ajout de la cl√© GPG
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | \
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    # Ajout du repository
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | \
        tee /etc/apt/sources.list.d/kubernetes.list

    apt-get update

    mark_operation_completed "$operation"
    echo "  ‚úì Repository Kubernetes configur√©"
}

# Ajout d'un repository Docker idempotent
setup_docker_repo_idempotent() {
    local operation="docker_repo_added"

    if operation_completed "$operation"; then
        echo "  ‚è≠Ô∏è  Repository Docker configur√© (d√©j√† fait)"
        return 0
    fi

    # V√©rifier si le repo existe d√©j√†
    if [ -f /etc/apt/sources.list.d/docker.list ]; then
        echo "  ‚è≠Ô∏è  Repository Docker d√©j√† pr√©sent"
        mark_operation_completed "$operation"
        return 0
    fi

    echo "  üîÑ Configuration du repository Docker..."

    # Installation des d√©pendances
    apt-get update
    apt-get install -y ca-certificates curl gnupg

    # Ajout de la cl√© GPG
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg

    # Ajout du repository
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null

    apt-get update

    mark_operation_completed "$operation"
    echo "  ‚úì Repository Docker configur√©"
}

# Exporter les fonctions
export -f init_idempotent
export -f operation_completed
export -f mark_operation_completed
export -f reset_all_operations
export -f run_once
export -f setup_swap_idempotent
export -f setup_kernel_modules_idempotent
export -f setup_sysctl_idempotent
export -f install_package_idempotent
export -f setup_ufw_rule_idempotent
export -f setup_ufw_network_rule_idempotent
export -f setup_ufw_vrrp_idempotent
export -f enable_ufw_idempotent
export -f setup_k8s_repo_idempotent
export -f setup_docker_repo_idempotent
